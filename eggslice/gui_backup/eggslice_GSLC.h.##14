//<File !Start!>
// FILE: [eggslice_GSLC.h]
// Created by GUIslice Builder version: [0.17.b18]
//
// GUIslice Builder Generated GUI Framework File
//
// For the latest guides, updates and support view:
// https://github.com/ImpulseAdventure/GUIslice
//
//<File !End!>

#ifndef _GUISLICE_GEN_H
#define _GUISLICE_GEN_H

// ------------------------------------------------
// Headers to include
// ------------------------------------------------
#include "GUIslice.h"
#include "GUIslice_drv.h"

// Include any extended elements
//<Includes !Start!>
// Include extended elements
#include "elem/XListbox.h"
#include "elem/XSlider.h"
//<Includes !End!>

// ------------------------------------------------
// Headers and Defines for fonts
// Note that font files are located within the Adafruit-GFX library folder:
// ------------------------------------------------
//<Fonts !Start!>
#if !defined(DRV_DISP_TFT_ESPI)
  #error E_PROJECT_OPTIONS tab->Graphics Library should be Adafruit_GFX
#endif
#include <TFT_eSPI.h>
#include "FreeSans10pt7b.h"
//#include "NULLFreeSans18pt7b.h"
#include "FreeSans30pt7b.h"
#include "NotoSansBold14pt7b.h"
#include "NotoSansBold16pt7b.h"
#include "dosis_book16pt7b.h"
//<Fonts !End!>

// ------------------------------------------------
// Defines for resources
// ------------------------------------------------
//<Resources !Start!>
extern "C" const unsigned short medium_egg80[] PROGMEM;
extern "C" const unsigned short wifinone[] PROGMEM;
//<Resources !End!>

// ------------------------------------------------
// Enumerations for pages, elements, fonts, images
// ------------------------------------------------
//<Enum !Start!>
enum {E_PG_MAIN,E_PG_WIFI_POPUP1};
enum {E_ELEM_BIGGER,E_ELEM_BTN7,E_ELEM_BTN8,E_ELEM_EGGIMG,E_ELEM_HARDER
      ,E_ELEM_LISTBOX1,E_ELEM_SIZE,E_ELEM_SMALLER,E_ELEM_SOFTER
      ,E_ELEM_STARTBTN,E_ELEM_TIMER,E_ELEM_WIFIIMG,E_LISTSCROLL1};
// Must use separate enum for fonts with MAX_FONT at end to use gslc_FontSet.
enum {E_BUILTIN15X24,E_BUILTIN5X8,E_DOSIS_BOOK16,E_FREESANS10
      ,E_FREESANS18,E_FREESANS30,E_NOTOSANSBOLD14,E_NOTOSANSBOLD16
      ,MAX_FONT};
//<Enum !End!>

// ------------------------------------------------
// Instantiate the GUI
// ------------------------------------------------

// ------------------------------------------------
// Define the maximum number of elements and pages
// ------------------------------------------------
//<ElementDefines !Start!>
#define MAX_PAGE                2

#define MAX_ELEM_PG_MAIN 10 // # Elems total on page
#define MAX_ELEM_PG_MAIN_RAM MAX_ELEM_PG_MAIN // # Elems in RAM

#define MAX_ELEM_PG_WIFI_POPUP1 4 // # Elems total on page
#define MAX_ELEM_PG_WIFI_POPUP1_RAM MAX_ELEM_PG_WIFI_POPUP1 // # Elems in RAM
//<ElementDefines !End!>

// ------------------------------------------------
// Create element storage
// ------------------------------------------------
gslc_tsGui                      m_gui;
gslc_tsDriver                   m_drv;
gslc_tsFont                     m_asFont[MAX_FONT];
gslc_tsPage                     m_asPage[MAX_PAGE];

//<GUI_Extra_Elements !Start!>
gslc_tsElem                     m_asPage1Elem[MAX_ELEM_PG_MAIN_RAM];
gslc_tsElemRef                  m_asPage1ElemRef[MAX_ELEM_PG_MAIN];
gslc_tsElem                     m_asPopup1Elem[MAX_ELEM_PG_WIFI_POPUP1_RAM];
gslc_tsElemRef                  m_asPopup1ElemRef[MAX_ELEM_PG_WIFI_POPUP1];
gslc_tsXListbox                 m_sListbox1;
// - Note that XLISTBOX_BUF_OH_R is extra required per item
char                            m_acListboxBuf1[85 + XLISTBOX_BUF_OH_R];
gslc_tsXSlider                  m_sListScroll1;

#define MAX_STR                 100

//<GUI_Extra_Elements !End!>

// ------------------------------------------------
// Program Globals
// ------------------------------------------------

// Element References for direct access
//<Extern_References !Start!>
extern gslc_tsElemRef* eggImg;
extern gslc_tsElemRef* eggSizeLabel;
extern gslc_tsElemRef* m_pElemListbox1;
extern gslc_tsElemRef* m_pListSlider1;
extern gslc_tsElemRef* startLabel;
extern gslc_tsElemRef* timerLabel;
extern gslc_tsElemRef* wifiImg;
//<Extern_References !End!>

// Define debug message function
static int16_t DebugOut(char ch);

// ------------------------------------------------
// Callback Methods
// ------------------------------------------------
bool CbBtnCommon(void* pvGui,void *pvElemRef,gslc_teTouch eTouch,int16_t nX,int16_t nY);
bool CbCheckbox(void* pvGui, void* pvElemRef, int16_t nSelId, bool bState);
bool CbDrawScanner(void* pvGui,void* pvElemRef,gslc_teRedrawType eRedraw);
bool CbKeypad(void* pvGui, void *pvElemRef, int16_t nState, void* pvData);
bool CbListbox(void* pvGui, void* pvElemRef, int16_t nSelId);
bool CbSlidePos(void* pvGui,void* pvElemRef,int16_t nPos);
bool CbSpinner(void* pvGui, void *pvElemRef, int16_t nState, void* pvData);
bool CbTickScanner(void* pvGui,void* pvScope);

// ------------------------------------------------
// Create page elements
// ------------------------------------------------
void InitGUIslice_gen()
{
  gslc_tsElemRef* pElemRef = NULL;

  if (!gslc_Init(&m_gui,&m_drv,m_asPage,MAX_PAGE,m_asFont,MAX_FONT)) { return; }

  // ------------------------------------------------
  // Load Fonts
  // ------------------------------------------------
//<Load_Fonts !Start!>
    if (!gslc_FontSet(&m_gui,E_BUILTIN15X24,GSLC_FONTREF_PTR,NULL,3)) { return; }
    if (!gslc_FontSet(&m_gui,E_BUILTIN5X8,GSLC_FONTREF_PTR,NULL,1)) { return; }
    if (!gslc_FontSet(&m_gui,E_DOSIS_BOOK16,GSLC_FONTREF_PTR,&dosis_book16pt7b,1)) { return; }
    if (!gslc_FontSet(&m_gui,E_FREESANS10,GSLC_FONTREF_PTR,&FreeSans10pt7b,1)) { return; }
    if (!gslc_FontSet(&m_gui,E_FREESANS18,GSLC_FONTREF_PTR,&FreeSans18pt7b,1)) { return; }
    if (!gslc_FontSet(&m_gui,E_FREESANS30,GSLC_FONTREF_PTR,&FreeSans30pt7b,1)) { return; }
    if (!gslc_FontSet(&m_gui,E_NOTOSANSBOLD14,GSLC_FONTREF_PTR,&NotoSansBold14pt7b,1)) { return; }
    if (!gslc_FontSet(&m_gui,E_NOTOSANSBOLD16,GSLC_FONTREF_PTR,&NotoSansBold16pt7b,1)) { return; }
//<Load_Fonts !End!>

//<InitGUI !Start!>
  gslc_PageAdd(&m_gui,E_PG_MAIN,m_asPage1Elem,MAX_ELEM_PG_MAIN_RAM,m_asPage1ElemRef,MAX_ELEM_PG_MAIN);
  gslc_PageAdd(&m_gui,E_PG_WIFI_POPUP1,m_asPopup1Elem,MAX_ELEM_PG_WIFI_POPUP1_RAM,m_asPopup1ElemRef,MAX_ELEM_PG_WIFI_POPUP1);

  // NOTE: The current page defaults to the first page added. Here we explicitly
  //       ensure that the main page is the correct page no matter the add order.
  gslc_SetPageCur(&m_gui,E_PG_MAIN);
  
  // Set Background to a flat color
  gslc_SetBkgndColor(&m_gui,GSLC_COL_BLACK);

  // -----------------------------------
  // PAGE: E_PG_MAIN
  
 
  // Create E_ELEM_WIFIIMG using Image 
  pElemRef = gslc_ElemCreateImg(&m_gui,E_ELEM_WIFIIMG,E_PG_MAIN,(gslc_tsRect){270,190,37,37},
    gslc_GetImageFromProg((const unsigned char*)wifinone,GSLC_IMGREF_FMT_BMP24));
  gslc_ElemSetFillEn(&m_gui,pElemRef,false);
  gslc_ElemSetClickEn(&m_gui, pElemRef, true);
  gslc_ElemSetTouchFunc(&m_gui, pElemRef, &CbBtnCommon);
  wifiImg = pElemRef;
 
  // Create E_ELEM_EGGIMG using Image 
  pElemRef = gslc_ElemCreateImg(&m_gui,E_ELEM_EGGIMG,E_PG_MAIN,(gslc_tsRect){190,40,58,80},
    gslc_GetImageFromProg((const unsigned char*)medium_egg80,GSLC_IMGREF_FMT_BMP24));
  gslc_ElemSetFillEn(&m_gui,pElemRef,false);
  eggImg = pElemRef;
  
  // create E_ELEM_BIGGER button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_BIGGER,E_PG_MAIN,
    (gslc_tsRect){270,40,30,30},(char*)" +",0,E_NOTOSANSBOLD14,&CbBtnCommon);
  gslc_ElemSetTxtAlign(&m_gui,pElemRef,GSLC_ALIGN_MID_LEFT);
  gslc_ElemSetRoundEn(&m_gui, pElemRef, true);
  
  // create E_ELEM_SMALLER button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_SMALLER,E_PG_MAIN,
    (gslc_tsRect){270,90,30,30},(char*)" -",0,E_NOTOSANSBOLD16,&CbBtnCommon);
  gslc_ElemSetTxtAlign(&m_gui,pElemRef,GSLC_ALIGN_MID_LEFT);
  gslc_ElemSetRoundEn(&m_gui, pElemRef, true);
  
  // Create E_ELEM_SIZE text label
  pElemRef = gslc_ElemCreateTxt(&m_gui,E_ELEM_SIZE,E_PG_MAIN,(gslc_tsRect){230,20,30,25},
    (char*)"XL",0,E_DOSIS_BOOK16);
  gslc_ElemSetTxtAlign(&m_gui,pElemRef,GSLC_ALIGN_MID_MID);
  gslc_ElemSetFillEn(&m_gui,pElemRef,false);
  gslc_ElemSetTxtCol(&m_gui,pElemRef,GSLC_COL_BLUE);
  eggSizeLabel = pElemRef;
  
  // create E_ELEM_SOFTER button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_SOFTER,E_PG_MAIN,
    (gslc_tsRect){180,130,30,30},(char*)" <",0,E_NOTOSANSBOLD16,&CbBtnCommon);
  gslc_ElemSetTxtAlign(&m_gui,pElemRef,GSLC_ALIGN_MID_LEFT);
  gslc_ElemSetRoundEn(&m_gui, pElemRef, true);
  
  // create E_ELEM_HARDER button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_HARDER,E_PG_MAIN,
    (gslc_tsRect){230,130,30,30},(char*)" >",0,E_NOTOSANSBOLD16,&CbBtnCommon);
  gslc_ElemSetTxtAlign(&m_gui,pElemRef,GSLC_ALIGN_MID_LEFT);
  gslc_ElemSetRoundEn(&m_gui, pElemRef, true);
  
  // Create E_ELEM_TIMER text label
  pElemRef = gslc_ElemCreateTxt(&m_gui,E_ELEM_TIMER,E_PG_MAIN,(gslc_tsRect){20,50,150,50},
    (char*)"00:00",0,E_FREESANS30);
  gslc_ElemSetTxtAlign(&m_gui,pElemRef,GSLC_ALIGN_MID_MID);
  gslc_ElemSetFillEn(&m_gui,pElemRef,false);
  gslc_ElemSetTxtCol(&m_gui,pElemRef,GSLC_COL_BLUE);
  timerLabel = pElemRef;
  
  // create E_ELEM_STARTBTN button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_STARTBTN,E_PG_MAIN,
    (gslc_tsRect){40,120,100,50},(char*)"Start",0,E_FREESANS18,&CbBtnCommon);
  gslc_ElemSetRoundEn(&m_gui, pElemRef, true);
  startLabel = pElemRef;
  
  // create E_ELEM_BTN8 button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_BTN8,E_PG_MAIN,
    (gslc_tsRect){150,190,80,40},(char*)"",0,E_BUILTIN5X8,&CbBtnCommon);

  // -----------------------------------
  // PAGE: E_PG_WIFI_POPUP1
  
   
  // Create wrapping box for listbox E_ELEM_LISTBOX1 and scrollbar
  pElemRef = gslc_ElemCreateBox(&m_gui,GSLC_ID_AUTO,E_PG_WIFI_POPUP1,(gslc_tsRect){10,10,280,180});
  gslc_ElemSetCol(&m_gui,pElemRef,GSLC_COL_BLUE,GSLC_COL_BLACK,GSLC_COL_BLACK);
  
  // Create listbox
  pElemRef = gslc_ElemXListboxCreate(&m_gui,E_ELEM_LISTBOX1,E_PG_WIFI_POPUP1,&m_sListbox1,
    (gslc_tsRect){10+2,10+4,280-4-20,180-7},E_FREESANS10,
    (uint8_t*)&m_acListboxBuf1,sizeof(m_acListboxBuf1),0);
  gslc_ElemXListboxSetSize(&m_gui, pElemRef, 5, 1); // 5 rows, 1 columns
  gslc_ElemXListboxItemsSetSize(&m_gui, pElemRef, -1, 25);
  gslc_ElemSetTxtMarginXY(&m_gui, pElemRef, 5, 5);
  gslc_ElemSetTxtCol(&m_gui,pElemRef,GSLC_COL_WHITE);
  gslc_ElemSetCol(&m_gui,pElemRef,GSLC_COL_BLUE,GSLC_COL_BLACK,GSLC_COL_BLACK);
  gslc_ElemXListboxSetSelFunc(&m_gui, pElemRef, &CbListbox);
  gslc_ElemXListboxItemsSetGap(&m_gui, pElemRef, 5,GSLC_COL_BLACK);
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "hghgh");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "ghghhg");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "ghghhgh");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "ghgfhfdgh");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "htrsjhtr");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "htfdjhstr");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "hdgfhgfh");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "hgfhrsh");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "43454");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "63636");
  gslc_ElemXListboxAddItem(&m_gui, pElemRef, "37373");
  gslc_ElemSetFrameEn(&m_gui,pElemRef,true);
  m_pElemListbox1 = pElemRef;

  // Create vertical scrollbar for listbox
  pElemRef = gslc_ElemXSliderCreate(&m_gui,E_LISTSCROLL1,E_PG_WIFI_POPUP1,&m_sListScroll1,
          (gslc_tsRect){10+280-2-20,10+4,20,180-8},0,16,0,5,true);
  gslc_ElemSetCol(&m_gui,pElemRef,GSLC_COL_BLUE,GSLC_COL_BLACK,GSLC_COL_BLUE);
  gslc_ElemXSliderSetPosFunc(&m_gui,pElemRef,&CbSlidePos);
  m_pListSlider1 = pElemRef;
  
  // create E_ELEM_BTN7 button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_BTN7,E_PG_WIFI_POPUP1,
    (gslc_tsRect){10,200,80,30},(char*)"<\xbc",0,E_BUILTIN15X24,&CbBtnCommon);
//<InitGUI !End!>

//<Startup !Start!>
//<Startup !End!>

}

#endif // end _GUISLICE_GEN_H
